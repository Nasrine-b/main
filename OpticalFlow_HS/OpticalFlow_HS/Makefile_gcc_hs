# --------------------- #
# -- Makefile_gcc_hs -- #
# --------------------- #

# -- Lile list ----------


STRUCT_FILE =
OF_FILE     = of_iter.c of_function.c of_function_fix.c of_score_op.c

HS_FILE     = hs_operator.c hs_operator_fast.c
LK_FILE     =
FOLKI_FILE  =

HS_FIX_FILE =

INTERP_FILE = interp.c interp_operator.c interp_extra.c
INTERP_FIX_FILE =

COMMON_FILE = parser.c sequence.c nrpyramid.c
TEST_FILE   = test_hs_operator.c
MAIN_FILE   = of_main.c

FILE = $(STRUCT_FILE) $(OF_FILE) $(HS_FILE) $(HS_FIX_FILE) $(HS_FILE) $(LK_FILE) $(FOLKI_FILE) $(COMMON_FILE) $(INTERP_FILE) $(INTERP_FIX_FILE) $(TEST_FILE) $(MAIN_FILE)

# -- Paths ----------
SRC_PATH = src
OBJ_PATH = obj
EXE_PATH = exe
INC_PATH = include

#Home
LIB_LIB_PATH = -L/nfs/home/sasl/eleves/main/3800549/Bureau/NRC2/NRC2/lib
LIB_INC_PATH = -I/nfs/home/sasl/eleves/main/3800549/Bureau/NRC2/NRC2/include -Iinclude

#Lab
#LIB_LIB_PATH = -L../NRC2/NRC2/lib
#LIB_INC_PATH = -I../NRC2/NRC2/include -Iinclude

# -- OS ----------
#OS = MACH_OSX
#OS = POSIX6
#OS = INTEL_CYCLE

# -- Config ----------
# if CONFIG = CLI  (Command Line Interface, no Apple Framework)
CONFIG = CLI

# -- Macros ----------
CC = gcc
#CC = icc
AR = ar -rc

# -- Flags ----------

C_WARNING_FLAGS = -Wno-comment -Wno-format -Wno-unused-value

C_DEBUG_FLAGS = -O0
C_OPTIMISATION_FLAGS = -O3 -std=c99 -fstrict-aliasing
C_OPTIMISATION_FLAGS = -O1 -std=c99 -fstrict-aliasing

C_ARCH_FLAGS =

#C_OS_FLAGS = -D$(OS)
C_CONFIG_FLAGS = -D$(CONFIG)
C_INC_FLAGS = -I$(INC_PATH)
#C_CHRONO_FLAG = -DINTEL_CYCLE

CFLAGS = $(C_DEBUG_FLAGS) $(C_WARNING_FLAGS) $(C_ARCH_FLAGS) $(C_OS_FLAGS) $(C_CONFIG_FLAGS) $(C_INC_FLAGS) $(LIB_INC_PATH)
CFLAGS = $(C_OPTIMISATION_FLAGS) $(C_WARNING_FLAGS) $(C_ARCH_FLAGS) $(C_OS_FLAGS) $(C_CONFIG_FLAGS) $(C_INC_FLAGS) $(LIB_INC_PATH)

LDFLAGS = $(C_DEBUG_FLAGS) $(C_ARCH_FLAGS) $(C_OS_FLAGS) $(C_CONFIG_FLAGS)$(C_INC_FLAGS) $(LIB_LIB_PATH)
LDFLAGS = $(C_OPTIMISATION_FLAGS) $(C_ARCH_FLAGS) $(C_OS_FLAGS) $(C_CONFIG_FLAGS)$(C_INC_FLAGS) $(LIB_LIB_PATH)


# -- Final product ----------
PRODUCT   = optflow.exe

# -- src and obj List ----------
SRC = $(addprefix ${SRC_PATH}/, $(FILE))
OBJ = $(addprefix ${OBJ_PATH}/, $(addsuffix .o, $(basename $(FILE))))

# -- Base rules ----------
$(OBJ_PATH)/%.o : $(SRC_PATH)/%.c
	$(CC) $(CFLAGS) -c $< -o $@

#-----Main rule ----------
$(EXE_PATH)/$(PRODUCT): $(OBJ)
	$(CC) -o $@ $^ $(LDFLAGS) $(INC) $(LIB_LIB_PATH) -lm -lgnrc3x

# -- Other stuff ----------
depend:
	makedepend $(CFLAGS) -Y $(SRC)

clean:
	rm -f $(OBJ)
	rm -f ${EXE_PATH}/${PRODUCT}
tar:
	make clean
	tar -cvf optflow.tar Makefile* src include
	#gzip -9 optflow.tar
	#bzip2 -z9 optflow.tar
	bzip -z9 optflow.tar

zip:
	make clean
	zip -qr9 optflow.zip Makefile* src/ include/
